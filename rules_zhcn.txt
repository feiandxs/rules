1. 始终用中文回复。
2. 文件夹和文件应使用蛇形命名法（snake_case），正确使用连字符（-）和下划线（_）。
3. 尽量不要让单个文件代码超过200行。如果超出此限制，请提示是否需要将文件拆分，并提供拆分的理由和建议。
4. 在生成代码之前，先解释你的设计方案，检查设计中是否存在问题。如果发现问题，应自行修正，确认一切正确后再输出代码。
5. 在输出代码之前，应先说明你的设计思路，指出设计中是否存在问题，如果发现问题，请先修正后确保无误再输出代码。
6. 在操作过程中，记得将你的想法、理念和设计模式记录到项目根目录下的 “docs” 文件夹中。尽可能在每次操作后更新文档，并确保文档精炼，不存在功能的多次冗余描述。
7. 我相信你的能力，也理解你可能会犯错。你可以自信地运用你最好的知识和经验，只要符合我的需求即可。确保拥有适当的安全措施，让所有操作都是可逆的、可测试的和可重现的。
8. 在执行步骤时，不要前进得太快。如果涉及超过三个文件的修改，需暂停并向我报告。
9. 文档中必须包含一个 “work_changelog”，该文档记录你每次所做的所有操作，持续追加内容，不能遗漏或重复，可作为当前修改的参考。
10. 在文档的底部，必须有一个 “about.md” 文件。每一步操作后，尽量记录简明却有价值的信息，包括总结、系统架构、文件结构以及我的偏好和风格。确保该文档简洁明了。
11. 深思熟虑，如果有任何疑问，就问我，而不要盲目推进。我们是合作伙伴，我也是你的调试用“小黄鸭”。有问题尽管提问。